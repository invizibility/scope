// Code generated by go-bindata.
// sources:
// web/index.html
// templates/css.tmpl
// templates/lib.tmpl
// tmpl/panels.tmpl
// tmpl/version.tmpl
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xe2\xb2\xc9\x48\x4d\x4c\xb1\xe3\xb2\xd1\x87\xd0\x5c\x36\x49\xf9\x29\x95\x76\x5c\x0a\x40\x10\x92\x91\x59\xac\x00\x44\x89\x0a\x25\xa9\xc5\x25\x7a\x40\x35\x10\x39\x90\x62\xb0\x66\x40\x00\x00\x00\xff\xff\x90\x67\x9c\x9c\x44\x00\x00\x00")

func webIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webIndexHtml,
		"web/index.html",
	)
}

func webIndexHtml() (*asset, error) {
	bytes, err := webIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/index.html", size: 68, mode: os.FileMode(436), modTime: time.Unix(1492142502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCssTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xcf\x31\x12\xc2\x20\x14\x04\xd0\xde\x53\x30\xf4\x24\x17\x30\xde\x85\xc8\x26\xa0\x3f\x1f\xe5\x7f\x0a\x86\xc9\xdd\x8d\x95\x6d\xc6\x7e\xdf\xce\x6e\xef\x01\x4b\x62\x18\x7b\x17\xb1\xfb\x7e\xb9\x52\xe2\xa7\x29\xa0\xc9\x8a\x36\x82\x44\x40\xad\x89\x05\xcb\x64\xc7\x23\x34\xce\x39\xab\x68\xf1\xaf\x61\x4b\x3c\x7c\xd9\xed\x84\x5a\x33\x05\x30\xf9\x96\xab\xba\xd9\x0b\xfe\x93\x94\xd6\xa8\x4e\x23\xb6\xf3\x05\x8f\x77\x45\x69\xae\xa6\xdf\xe0\xde\xc1\xe1\x78\xfb\x09\x00\x00\xff\xff\x32\x2c\xf8\xc5\xff\x00\x00\x00")

func templatesCssTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCssTmpl,
		"templates/css.tmpl",
	)
}

func templatesCssTmpl() (*asset, error) {
	bytes, err := templatesCssTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/css.tmpl", size: 255, mode: os.FileMode(420), modTime: time.Unix(1492722664, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLibTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\xd1\xc1\x0a\xc3\x20\x0c\x06\xe0\xfb\x9e\xa2\xe4\x5e\x65\xeb\x8e\x6d\xdf\xc5\xd6\x6c\x58\x9c\x3a\x8d\x32\x91\xbe\xfb\x84\x5e\x7b\xd8\xf0\x1a\x7e\x3e\x92\xfc\xa5\x48\x7c\x28\x83\x1d\x68\xb5\xc0\xbe\x5f\xc6\xb0\x7a\xe5\xa8\xa3\xec\x70\x02\xc2\x0f\xf1\x4d\x24\x71\x4c\xa1\x0b\x7e\x9d\x80\xd7\x2c\xdf\xde\x11\x7d\x66\x2f\x65\xd8\x16\x60\x1e\xf9\x11\x99\xff\x15\xfa\xa8\x5a\x90\xc5\x5a\x0a\xe4\x85\x6b\x41\x9e\x56\x4b\x34\x5a\x64\x1b\xe9\xc4\xf9\x1d\x92\x03\x4b\xf7\x96\x4d\xe4\xd0\xd7\xaf\x44\x64\xe9\xd6\xc8\x78\xac\x50\x20\x96\xae\x67\x17\x95\x82\x46\xd6\xba\xbf\x01\x00\x00\xff\xff\xb0\xf3\x30\x6f\x00\x02\x00\x00")

func templatesLibTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLibTmpl,
		"templates/lib.tmpl",
	)
}

func templatesLibTmpl() (*asset, error) {
	bytes, err := templatesLibTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/lib.tmpl", size: 512, mode: os.FileMode(420), modTime: time.Unix(1492722675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPanelsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x61\x6f\xdb\x36\x13\xfe\xae\x5f\xc1\x57\x7d\x01\x4b\x80\x2a\xa7\x19\xf6\x45\x76\x3c\x0c\xd9\x30\x14\xd8\xd6\x02\x1b\xba\x0f\x41\x50\x28\x12\x25\x11\xa1\x45\x81\xa4\x9d\x78\xae\xfe\xfb\x8e\x3c\x4a\xa2\x1c\xb7\x4d\x3a\x60\x01\x02\x4b\xc7\xe7\x1e\xde\x1d\x1f\x92\xa7\xe3\xb1\xa4\x15\x6b\x29\x09\x1b\xbd\xe5\x61\xdf\x07\x6b\xf3\xb0\x09\xe0\x97\xe6\xe5\x26\x20\xe4\x78\xd4\x74\xdb\xf1\x5c\x03\x88\xb3\x3b\x83\x99\x1b\x0b\xa5\xac\xa3\xd2\x07\x4e\x37\x41\x5a\x88\xb6\x62\x35\x39\x02\x8c\x90\x07\x56\xea\x26\x23\x6f\x2e\xba\xc7\x95\x35\x34\x94\xd5\x8d\xf6\x2d\x77\x79\x71\x5f\x4b\xb1\x6b\xcb\x8c\xbc\xaa\xaa\x0a\xad\x15\x17\x39\xc0\x38\xad\x34\x1a\xb6\xb9\xac\x59\x9b\x91\xef\xbb\x47\xfb\x7f\x41\x2e\x70\xa0\xd8\x49\x25\x64\x46\x3a\xc1\x5a\x4d\xa5\x73\x17\xad\x7e\xad\xd8\xdf\x74\x98\xa9\x0f\x5e\x16\xd9\x84\xcf\x1a\xb1\xa7\xd2\x79\xf9\xbc\x97\x88\x5b\x2f\x5d\xe6\xeb\x25\xd6\x2c\x58\xdf\x89\xf2\xb0\xb1\xf8\x75\xf3\x66\x43\xde\xe7\x2d\xe5\x0a\x88\xdf\x10\xc0\x80\xe1\x03\x95\x8a\x09\x48\xe6\x78\x4c\xdd\xb3\xa9\xe0\x12\xfd\xd6\xaa\x90\xac\xd3\x9b\x20\xaa\x76\x6d\xa1\x61\x30\x8a\x8f\x41\xb0\xcf\x25\x91\xb4\x2d\xa9\xfc\x2d\xef\xc8\x95\x0d\x28\x54\x0c\x96\x81\x86\x19\x19\xa1\x3c\x3f\x88\x9d\x4e\x20\x76\x9d\xc3\xca\xca\x44\x69\x58\xa6\x24\xef\xba\x18\x53\x30\x3c\x45\x55\x03\x43\xf9\x5d\xaa\x28\xa7\x85\x8e\x46\x74\x5a\x53\xfd\x33\xa7\x5b\xda\xea\x28\xbe\xb9\xb8\x8d\x53\x70\x84\x49\xa3\xb0\x64\xfb\x30\x4e\x0b\x9e\x2b\x45\xe1\x15\x18\xc2\x44\xcb\x1d\x8d\x57\x13\x2b\xb0\x80\xe3\xbf\x65\x46\x96\x19\x3b\xcc\x96\x1a\x61\xda\x51\x58\x93\x30\x46\x33\x42\xa7\x21\xeb\x68\xc6\x7a\xb3\x80\x26\x26\x55\x88\x8e\x42\x44\x53\x29\x6d\xe1\xa6\x62\x2a\x53\xca\x3e\x18\x33\x00\xf6\x95\x7b\x2b\x99\xea\x72\x5d\x34\xc3\x7b\xc3\x94\x16\xf2\x30\xbc\x52\xee\x1e\xb0\xe4\xee\x05\xb2\x9a\x31\x36\xb9\xd4\xfe\xfc\x58\x17\x78\x72\xcb\x41\x39\x8c\xfe\x7f\x32\xa7\xad\x28\x69\x14\xc7\x63\x55\x91\x1d\x40\x2d\x7d\x20\xbf\x08\x5e\xd2\xf6\x57\x6b\x8a\x30\xda\x04\x28\xbc\x45\x70\x41\x02\xfe\xe6\xd6\x1a\xd1\x3f\x95\xb4\x86\x11\x2a\xaf\xc5\xb6\x13\xad\x59\x85\xb0\xc8\xdb\x7d\xae\xc2\x64\x0a\x6e\x52\x0d\xb1\xb2\x89\x9d\xec\x07\x72\x09\xb4\xae\x6c\x37\x16\x90\xe2\xdb\x2d\xf9\xf4\x69\x12\xe7\x7c\x68\x24\x90\x83\x36\xc9\xe9\x34\x89\xa9\x5a\x3c\x02\x97\xcb\x3f\xdf\xfd\xf4\xce\xf1\x81\x72\xd2\x74\x16\x04\xa6\x7d\x3d\x70\x40\x48\xe7\x45\x96\xc2\xc9\x06\x7a\x4a\x8d\x54\xe3\x53\x06\xa3\x94\x17\x50\x78\xd2\xc2\x3f\x56\x91\x08\xd3\xc4\x70\x3e\x30\xfa\xe0\x57\xcb\xc9\xd3\x0f\x34\x55\x8d\x78\x88\xdc\x52\x79\x98\x59\x28\x69\xc3\xcc\xf2\x4f\xa0\x1e\x96\x57\xd1\xaf\x30\x9f\x3a\x9d\x65\x3e\x9d\xbe\xb7\x4f\xbd\xb3\x38\x99\x80\x08\x16\x90\x57\x71\x7f\x2d\x29\x64\x57\x2e\x3c\x75\x58\xfb\xa9\x24\xb4\xa8\x6b\x4e\xad\x86\xc3\x35\x6c\x65\x62\x37\xf2\xd5\x02\x43\x5c\x6c\xd6\xb0\x87\xda\xc1\x58\xf3\x43\xd7\x30\x18\x22\xe3\xd3\xeb\x42\x18\xd4\xd2\xc0\xe0\x07\x18\x36\x5e\x99\xed\x94\xa9\x39\x57\x21\x01\x93\x91\x14\x5c\x4d\x29\x75\x92\xda\x33\x04\x83\xf0\x72\x43\x83\xc9\x26\x2c\x38\x2b\xee\x7d\x91\x9f\x2e\x13\x62\xaf\x6d\xbc\xb3\xfa\xc4\x67\x12\x45\xd8\xd3\x03\x65\xfa\x1b\x04\x36\x28\x0b\x53\x00\x55\xfd\x08\xf8\xbd\x21\x30\xcb\xf2\x16\x2e\x50\xd0\xd7\x08\x5c\x3d\xe1\xc0\xf9\x4a\x60\xf8\xdf\x4c\x9c\x7f\x18\xd5\xa1\xab\xd3\xdd\x93\x65\x47\x2c\x7d\x84\x89\x4a\x84\xcf\x43\x9c\x24\x64\xdc\xb3\x61\xaa\x19\xa6\x3f\x91\x93\x11\xbc\xc3\x9d\x66\x3c\x9f\xf6\xb3\x5b\xd0\x09\xf0\xa5\xae\xc3\xd6\x73\x22\x0f\xe6\x51\x9e\xdb\x1d\xcf\x8d\xc7\x11\x7e\x6b\x3c\x67\xd2\xe9\x27\xf1\xac\xc6\xdd\xe5\x6f\x2f\xd6\x32\x1d\xe1\x05\x45\xf0\x6e\x18\xba\x12\x4f\x51\x1f\xa1\xc0\x70\xfa\xe9\x9d\x6c\x09\x74\x3d\x3b\x13\x80\x4a\x39\x6d\x6b\xdd\x90\x1f\x88\x3b\xf7\xaf\xc8\xc7\x04\x29\x62\x92\x0d\x37\x97\xc7\x3b\xdc\x5e\x2f\x61\x1e\x7c\xe6\xdc\xe3\x3d\xe8\xb1\x4f\xd7\xcc\xb3\xc9\x9d\xcb\x9c\x7b\xb8\x53\x3d\x6a\xbf\xc9\x79\x36\xf9\xe8\x34\xa7\x1f\xcd\xfe\x04\xe3\x8d\xfa\x6c\x76\xf4\x98\x53\xa3\x0d\x79\x9d\xab\x1d\x5b\x0d\xad\xc7\xb8\xb0\xa8\x4e\x45\xb5\x66\x6d\xad\x32\x4f\xad\x46\x42\xef\x45\x07\x3c\x6f\x0b\xd3\x0f\x56\x39\xa8\x19\x85\x93\xd8\x9f\x92\x41\x28\xa6\x3f\x9c\xb9\xdd\x09\x09\x59\xfd\x85\x1d\xec\xa5\x8f\x77\xea\xcc\xc8\xcd\x84\xd6\x87\x0e\xda\xd5\x85\x14\x0f\x8b\x24\xf0\x45\x7e\x0a\x9c\x3b\x40\x3f\xe5\x3a\x85\x30\x39\xb3\x47\xdc\xd8\xef\xf9\xd6\x62\x5d\x2b\xf1\x94\x8b\x69\x3e\x01\xa0\x05\x3e\x83\x61\xea\x9a\x0b\x95\xdf\x19\xa0\xad\xc0\x17\xe6\xb3\xc7\x59\x76\x66\xc3\x9b\xbf\xb0\x85\x68\xa0\x19\x0e\xcf\xcf\x63\x21\xa8\x08\x03\x72\xbd\xf3\x67\x70\x8a\xca\x3d\xe2\x5e\x85\x4f\x10\xfd\x7c\xd7\xcf\x29\xfe\xdb\x82\x5e\x7e\x89\xec\xb9\xd5\x3a\x47\x62\x21\xdf\x52\xad\x24\xf8\x5a\xbd\xc6\x37\x6c\x0e\xfb\x5b\xd8\x32\x76\xc7\x98\xeb\xd2\x34\xec\xe3\xf5\xe6\xce\x3a\x73\x8a\x4e\xdf\x14\xa1\xf9\x4e\x32\x9f\x0c\x39\xe7\x51\x01\x37\x42\x1f\xc3\x99\x0a\x2d\x84\xfb\x6e\x82\x8f\x2c\xfb\x11\x7b\x3c\x42\xf4\xf0\x61\xf5\x4f\x00\x00\x00\xff\xff\xb0\x57\x28\xcd\xe6\x0e\x00\x00")

func tmplPanelsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPanelsTmpl,
		"tmpl/panels.tmpl",
	)
}

func tmplPanelsTmpl() (*asset, error) {
	bytes, err := tmplPanelsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/panels.tmpl", size: 3814, mode: os.FileMode(420), modTime: time.Unix(1492723438, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplVersionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x28\xc9\xcd\x51\xaa\xad\xe5\xb2\x01\x31\xec\xb8\x80\x74\x6a\x62\x0a\x88\xd6\x87\x31\x92\xf2\x53\x2a\xed\xb8\x14\x80\xc0\x26\xc3\xd0\x4e\x21\x38\x39\xbf\x20\x55\xc1\xd0\xc0\x50\x01\xa8\x04\xc8\x0f\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\xa8\xae\xd6\x83\xb2\x41\xc6\xe9\x43\xb4\x81\xcc\x01\x1b\x5c\x5d\x9d\x9a\x97\x02\x94\x00\x04\x00\x00\xff\xff\xe2\x16\x52\x53\x7a\x00\x00\x00")

func tmplVersionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplVersionTmpl,
		"tmpl/version.tmpl",
	)
}

func tmplVersionTmpl() (*asset, error) {
	bytes, err := tmplVersionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/version.tmpl", size: 122, mode: os.FileMode(420), modTime: time.Unix(1492719428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/index.html": webIndexHtml,
	"templates/css.tmpl": templatesCssTmpl,
	"templates/lib.tmpl": templatesLibTmpl,
	"tmpl/panels.tmpl": tmplPanelsTmpl,
	"tmpl/version.tmpl": tmplVersionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"css.tmpl": &bintree{templatesCssTmpl, map[string]*bintree{}},
		"lib.tmpl": &bintree{templatesLibTmpl, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"panels.tmpl": &bintree{tmplPanelsTmpl, map[string]*bintree{}},
		"version.tmpl": &bintree{tmplVersionTmpl, map[string]*bintree{}},
	}},
	"web": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{webIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
