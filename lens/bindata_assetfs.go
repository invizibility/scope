// Code generated by go-bindata.
// sources:
// web/index.html
// templates/css.tmpl
// templates/lib.tmpl
// tmpl/panels.tmpl
// tmpl/version.tmpl
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\xc9\x28\xc9\xcd\xb1\xe3\xe2\xb2\xc9\x48\x4d\x4c\xb1\xe3\xb2\xd1\x87\xd0\x5c\x36\x49\xf9\x29\x95\x76\x5c\x0a\x40\x10\x92\x91\x59\xac\x00\x44\x89\x0a\x25\xa9\xc5\x25\x7a\x40\x35\x10\x39\x90\x62\xb0\x66\x40\x00\x00\x00\xff\xff\x90\x67\x9c\x9c\x44\x00\x00\x00")

func webIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webIndexHtml,
		"web/index.html",
	)
}

func webIndexHtml() (*asset, error) {
	bytes, err := webIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/index.html", size: 68, mode: os.FileMode(436), modTime: time.Unix(1492142502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCssTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\xce\x31\x0e\xc2\x30\x0c\x85\xe1\x9d\x53\x44\xde\xdb\x5e\x80\x72\x97\x94\xbc\x36\x11\xae\x83\x62\x33\x54\x56\xef\x4e\x18\xd8\x11\xfb\xfb\x9e\x7e\xf7\x84\xb5\x08\x02\xdd\x55\xe9\x3c\x2f\x57\x2e\xf2\x08\x0d\x3c\x93\xda\xc1\xd0\x0c\x18\x85\xdc\xb0\xce\x34\xf5\xd1\xb4\xd4\x6a\x6a\x2d\x3e\xc7\xbd\xc8\xf8\x61\xb7\x1f\xd4\x56\x39\x41\x38\x1e\xf5\x65\xc3\x12\x15\xff\x49\x2e\x5b\xb6\xc1\x32\xf6\xef\x81\x3b\x24\xf5\xf0\x77\x00\x00\x00\xff\xff\x9a\xc4\xb1\xaf\xca\x00\x00\x00")

func templatesCssTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCssTmpl,
		"templates/css.tmpl",
	)
}

func templatesCssTmpl() (*asset, error) {
	bytes, err := templatesCssTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/css.tmpl", size: 202, mode: os.FileMode(420), modTime: time.Unix(1493214800, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLibTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\xd2\xbf\x6e\xc3\x20\x10\x06\xf0\xbd\x4f\x71\x62\x49\x33\x14\xab\x7f\x36\x87\xbc\x8b\x6d\xce\x15\x16\xe1\x5c\x38\x48\x2d\xe4\x77\x2f\x6d\x92\x46\x1e\xba\x94\xf5\xf8\xf8\x09\xf1\x5d\xce\x1a\x47\xe3\x10\x84\x35\xbd\x58\xd7\x87\x43\x18\xbc\x99\xf9\x68\x46\x78\xe4\x65\x46\x1a\xe1\x44\x3a\x5a\x04\xa5\x14\xec\xa8\x9f\x70\xe0\xdd\x1e\xf2\xd9\x38\x4d\x67\x79\x3b\xbc\xa6\xda\xdf\x34\x44\x77\xa1\x75\xbb\x1e\x9a\xab\x7a\xe3\xe1\x9b\x56\x82\xf1\x93\x9b\xa9\x4b\xdd\x65\x2a\x20\xf8\x41\x89\xa6\x3c\xa5\x99\x3e\x22\xfa\x45\x9e\x8c\x93\x53\x10\xc7\x7f\x08\x3d\x11\x07\xf6\xdd\x5c\x83\xbc\x93\xd5\xe8\x6c\xb7\x50\xe4\x1a\x47\xbf\xca\xf4\x56\x07\x3c\x95\x1f\x89\x28\xd3\x4b\x25\xe3\xb1\x40\x81\x65\x7a\xfe\x1b\xfa\xa9\x7f\xd3\xf0\xfe\x5e\xec\x66\xde\xde\xef\xe6\x8c\x4e\x97\x15\xfa\x0a\x00\x00\xff\xff\x68\xd0\xbe\x19\x54\x02\x00\x00")

func templatesLibTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesLibTmpl,
		"templates/lib.tmpl",
	)
}

func templatesLibTmpl() (*asset, error) {
	bytes, err := templatesLibTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/lib.tmpl", size: 596, mode: os.FileMode(420), modTime: time.Unix(1493224764, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplPanelsTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x57\x51\x6f\xdb\x36\x10\x7e\xd7\xaf\xe0\xd4\x02\x96\x00\x55\x4e\x52\xec\xc5\x76\x3c\x0c\xd9\x30\x14\xd8\xd6\x0e\x1b\xba\x87\x20\x28\x14\x89\x92\xb8\xd0\xa2\x40\xd2\x4e\x3c\x57\xff\x7d\x47\x1e\x25\x51\x8e\xdb\x26\x1d\xd0\x00\x81\xa5\xe3\x77\x1f\xef\x8e\x1f\xc5\xe3\xe1\x50\xd0\x92\x35\x94\x84\xb5\xde\xf0\xb0\xeb\x82\x95\x79\x58\x07\xf0\x4b\xb3\x62\x1d\x10\x72\x38\x68\xba\x69\x79\xa6\x01\xc4\xd9\xad\xc1\x4c\x8d\xb9\x52\xd6\x51\xe9\x3d\xa7\xeb\x20\xcd\x45\x53\xb2\x8a\x1c\x00\x46\xc8\x3d\x2b\x74\xbd\x20\xe7\x67\xed\xc3\xd2\x1a\x6a\xca\xaa\x5a\xfb\x96\xdb\x2c\xbf\xab\xa4\xd8\x36\xc5\x82\xbc\x28\xcb\x12\xad\x25\x17\x19\xc0\x38\x2d\x35\x1a\x36\x99\xac\x58\xb3\x20\xdf\xb7\x0f\xf6\xff\x8c\x9c\xe1\x40\xbe\x95\x4a\xc8\x05\x69\x05\x6b\x34\x95\xce\x5d\x34\xfa\x95\x62\xff\xd2\x7e\xa6\x2e\x78\x5e\x64\x23\x7e\x51\x8b\x1d\x95\xce\xcb\xe7\xbd\x40\xdc\x6a\xee\x32\x5f\xcd\xb1\x66\xc1\xea\x56\x14\xfb\xb5\xc5\xaf\xea\xf3\x35\x79\x97\x35\x94\x2b\x20\x3e\x27\x80\x01\xc3\x7b\x2a\x15\x13\x90\xcc\xe1\x90\xba\x67\x53\xc1\x39\xfa\xad\x54\x2e\x59\xab\xd7\x41\x54\x6e\x9b\x5c\xc3\x60\xf4\x32\x29\x5e\xc7\x87\x60\x97\x49\x22\x69\x53\x50\xf9\x5b\xd6\x92\x4b\x1b\x53\xa8\x18\xac\x04\x0d\x17\x64\x40\xf3\x6c\x2f\xb6\x3a\x81\xf0\x75\x06\x8b\x2b\x13\xa5\x61\xa5\x92\xac\x6d\x63\xcc\xc2\xf0\xe4\x65\x05\x0c\xc5\xeb\x54\x51\x4e\x73\x1d\x0d\xe8\xb4\xa2\xfa\x67\x4e\x37\xb4\xd1\x51\x7c\x7d\x76\x13\xa7\xe0\x08\x93\x46\x61\xc1\x76\x61\x9c\xe6\x3c\x53\x8a\xc2\x2b\x30\x84\x89\x96\x5b\x1a\x2f\x47\x56\x60\x01\xc7\xff\xcb\x8c\x2c\x13\x76\x98\x2d\x35\xda\xb4\xa3\xb0\x2c\x61\x8c\x66\x84\x8e\x43\xd6\xd1\x8c\x75\x66\x0d\x4d\x4c\x2a\x17\x2d\x85\x88\x86\xfa\xc4\xb6\x70\x63\x31\x95\x29\x65\x17\x0c\x19\x00\xfb\xd2\xbd\x15\x4c\xb5\x99\xce\xeb\xfe\xbd\x66\x4a\x0b\xb9\xef\x5f\x29\x77\x0f\x58\x72\xf7\x02\x59\x4d\x18\xeb\x4c\x6a\x7f\x7e\xac\x0b\x3c\xb9\xe5\xa0\x1c\x46\x5f\x8e\xe6\xb4\x11\x05\x8d\xe2\x78\xa8\x2a\xb2\x03\xa8\xa1\xf7\xe4\x17\xc1\x0b\xda\xfc\x6a\x4d\x11\x46\x9b\x00\x85\xb7\x08\x2e\x48\xc0\x5f\xdf\x58\x23\xfa\xa7\x92\x56\x30\x42\xe5\x95\xd8\xb4\xa2\x31\xab\x10\xe6\x59\xb3\xcb\x54\x98\x8c\xc1\x8d\xaa\x21\x56\x36\xb1\x53\x7e\x4f\x2e\x81\xd6\x95\xed\xda\x02\x52\x7c\xbb\x21\x1f\x3f\x8e\xe2\x9c\x0e\x0d\x04\xb2\xd7\x26\x39\x9e\x26\x31\x55\x8b\x07\xe0\x7c\xfe\xd7\xdb\x9f\xde\x3a\x3e\x50\x4e\x9a\x4e\x82\xc0\xb4\xaf\x7a\x0e\x08\xe9\xb4\xc8\x52\xf8\xb8\x81\x9e\x52\x23\xd5\xf8\x98\xc1\x28\xe5\x19\x14\x9e\xb4\xf0\x8f\x95\x24\xc2\x34\x31\x9c\xf7\x8c\xde\xfb\xd5\x72\xf2\xf4\x03\x4d\x55\x2d\xee\x23\xb7\x54\x1e\x66\x12\x4a\x5a\x33\xb3\xfc\x23\xa8\x83\xe5\x55\xf4\x0b\xcc\xc7\x4e\x27\x99\x8f\xa7\xef\xec\x53\xe7\x2c\x4e\x26\x20\x82\x19\xe4\x95\xdf\x5d\x49\x0a\xd9\x15\x33\x4f\x1d\xd6\x7e\x2c\x09\x2d\xaa\x8a\x53\xab\xe1\x70\x05\x5b\x99\xd8\x8d\x7c\x39\xc3\x10\x67\xeb\x15\xec\xa1\xa6\x37\x56\x7c\xdf\xd6\x0c\x86\xc8\xf0\xf4\x2a\x17\x06\x35\x37\x30\xf8\x01\x86\xb5\x57\x66\x3b\x65\x6a\x3e\xad\x90\x80\xc9\x48\x0a\xae\xc6\x94\x5a\x49\xed\x37\x04\x83\xf0\x72\x43\x83\xc9\x26\xcc\x39\xcb\xef\x7c\x91\x1f\x2f\x13\x62\xaf\x6c\xbc\x93\xfa\xc4\x27\x12\x45\xd8\xe3\x0f\xca\xf8\xd7\x0b\xac\x57\x16\xa6\x00\xaa\xfa\x11\xf0\x3b\x43\x60\x96\xe5\x0d\x9c\xa1\xa0\xaf\x01\xb8\x7c\xc4\x81\xf3\x15\xc0\xf0\xdd\x44\x9c\x7f\x1a\xd5\xa1\xab\xd3\xdd\xa3\x65\x47\x2c\x7d\x80\x89\x0a\x84\x4f\x43\x1c\x25\x64\xdc\x17\xfd\x54\x13\x4c\x77\x24\x27\x23\x78\x87\x3b\xce\x78\x3a\xed\x27\xb7\xa0\x13\xe0\x73\x5d\xfb\xad\xe7\x44\x1e\x4c\xa3\x3c\xb5\x3b\x9e\x1a\x8f\x23\xfc\xda\x78\x4e\xa4\xd3\x8d\xe2\x59\x0e\xbb\xcb\xdf\x5e\xac\x61\x3a\xc2\x03\x8a\xe0\xd9\xd0\x37\x26\x9e\xa2\x3e\x40\x81\xe1\xeb\xa7\xb7\xb2\x21\xd0\xf8\x6c\x4d\x00\x2a\xe5\xb4\xa9\x74\x4d\x7e\x20\xee\xbb\x7f\x49\x3e\x24\x48\x11\x93\x45\x7f\x72\x79\xbc\xfd\xe9\xf5\x1c\xe6\xde\x67\xca\x3d\x9c\x83\x1e\xfb\x78\xcc\x3c\x99\xdc\xb9\x4c\xb9\xfb\x33\xd5\xa3\xf6\x9b\x9c\x27\x93\x0f\x4e\x53\xfa\xc1\xec\x4f\x30\x9c\xa8\x4f\x66\x47\x8f\x29\x35\xda\x90\xd7\xb9\xda\xb1\x65\xdf\x7a\x0c\x0b\x8b\xea\x54\x54\x6b\xd6\x54\x6a\xe1\xa9\xd5\x48\xe8\x9d\x68\x81\xe7\x4d\x6e\x5a\xc2\x32\x03\x35\xa3\x70\x12\xfb\x53\x30\x08\xc5\xb4\x88\x13\xb7\x5b\x21\x21\xab\xbf\xb1\x89\xbd\xf0\xf1\x4e\x9d\x0b\x72\x3d\xa2\xf5\xbe\x85\x8e\x75\x26\xc5\xfd\x2c\x09\x7c\x91\x1f\x03\xa7\x0e\xd0\x4f\xb9\x4e\x21\x4c\x4e\xec\x11\x37\xf6\x7b\xb6\xb1\x58\xd7\x4a\x3c\xe6\x62\x9a\x8f\x00\xe8\x82\x4f\x60\x98\xba\xe2\x42\x65\xb7\x06\x68\x2b\xf0\x99\xf9\xec\xe7\x6c\x71\x62\xc3\x9b\xbf\xb0\x81\x68\xa0\x19\x0e\x4f\xcf\x63\x21\xa8\x08\x03\x72\xbd\xf3\x27\x70\x8a\xca\x1d\xe2\x5e\x84\x8f\x10\xdd\x74\xd7\x4f\x29\xbe\x6d\x41\x2f\x3e\x47\xf6\xd4\x6a\x9d\x22\xb1\x90\xaf\xa9\x56\x12\x7c\xa9\x5e\xc3\x1b\x36\x87\xdd\x0d\x6c\x19\xbb\x63\xcc\x71\x69\x1a\xf6\xe1\x78\x73\xdf\x3a\xf3\x15\x1d\xef\x14\xa1\xb9\x2a\x99\x2b\x43\xc6\x79\x94\xc3\x89\xd0\xc5\xd1\x3f\x7f\x6c\xa9\xdc\x9b\x9b\x92\xb9\x93\xb9\x3b\x14\x5c\xb8\xec\x85\xf6\x70\x80\x34\xe0\x92\xf5\x5f\x00\x00\x00\xff\xff\x4e\x54\x28\xe1\xf2\x0e\x00\x00")

func tmplPanelsTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplPanelsTmpl,
		"tmpl/panels.tmpl",
	)
}

func tmplPanelsTmpl() (*asset, error) {
	bytes, err := tmplPanelsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/panels.tmpl", size: 3826, mode: os.FileMode(420), modTime: time.Unix(1493224783, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplVersionTmpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x28\xc9\xcd\x51\xaa\xad\xe5\xb2\x01\x31\xec\xb8\x80\x74\x6a\x62\x0a\x88\xd6\x87\x31\x92\xf2\x53\x2a\xed\xb8\x14\x80\xc0\x26\xc3\xd0\x4e\x21\x38\x39\xbf\x20\x55\xc1\xd0\xc0\x50\x01\xa8\x04\xc8\x0f\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\xa8\xae\xd6\x83\xb2\x41\xc6\xe9\x43\xb4\x81\xcc\x01\x1b\x5c\x5d\x9d\x9a\x97\x02\x94\x00\x04\x00\x00\xff\xff\xe2\x16\x52\x53\x7a\x00\x00\x00")

func tmplVersionTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplVersionTmpl,
		"tmpl/version.tmpl",
	)
}

func tmplVersionTmpl() (*asset, error) {
	bytes, err := tmplVersionTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/version.tmpl", size: 122, mode: os.FileMode(420), modTime: time.Unix(1492719428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/index.html": webIndexHtml,
	"templates/css.tmpl": templatesCssTmpl,
	"templates/lib.tmpl": templatesLibTmpl,
	"tmpl/panels.tmpl": tmplPanelsTmpl,
	"tmpl/version.tmpl": tmplVersionTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"css.tmpl": &bintree{templatesCssTmpl, map[string]*bintree{}},
		"lib.tmpl": &bintree{templatesLibTmpl, map[string]*bintree{}},
	}},
	"tmpl": &bintree{nil, map[string]*bintree{
		"panels.tmpl": &bintree{tmplPanelsTmpl, map[string]*bintree{}},
		"version.tmpl": &bintree{tmplVersionTmpl, map[string]*bintree{}},
	}},
	"web": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{webIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
