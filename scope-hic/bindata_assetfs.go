// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x1b\x6d\x6f\xdb\xb8\xf9\x7b\x7e\x05\xa7\xde\x30\xb9\x71\x24\xdb\x19\xee\xb0\xd4\x09\x70\x6d\xd3\xbb\x62\xd7\xf4\x2e\xe9\xed\x30\x18\x46\x41\x5b\x4c\xcc\x44\x96\x5c\x89\x4e\xec\x2b\x02\xec\xfb\xfe\xe5\x7e\xc9\x9e\x87\xa4\x24\x4a\x22\x65\xa7\xbd\x7d\x99\x03\xf8\x85\x7a\xde\xf8\xf0\x79\x25\x99\xf1\x9f\x5e\xbf\x7f\xf5\xe1\x9f\x3f\x9f\x93\x85\x58\xc6\x67\x07\x63\xf5\x01\x9f\x8c\x46\x67\x07\x04\x5e\x63\xc1\x45\xcc\xce\x7e\xe4\xaf\xc8\x6b\x2a\x28\x79\x99\xa5\x0f\x39\xcb\xc6\xa1\x1a\x57\x30\x31\x4f\xee\x48\xc6\xe2\x53\x2f\x17\xdb\x98\xe5\x0b\xc6\x84\x47\x16\x19\xbb\x3e\xf5\xc2\x79\x9e\x87\xb3\x34\x15\xb9\xc8\xe8\x2a\x58\xf2\x24\x80\x11\x4f\x63\x4a\x78\xf5\x1d\x5f\xcf\xe6\x22\x8b\xc9\xe7\xf2\x37\xbe\x1e\x78\x24\x16\x27\x64\x34\x18\xac\x36\x2f\x6a\x4f\x56\x69\xce\x05\x4f\x93\x13\x42\x67\x79\x1a\xaf\x05\xab\x3f\x8f\xd9\xb5\x38\x21\x83\xfa\xa0\x48\x57\xad\xb1\x05\xe3\x37\x0b\x00\x1d\x0e\x06\x7f\xae\x3f\x99\xd1\xf9\xdd\x4d\x96\xae\x93\xe8\x68\x9e\xc6\x69\x76\x42\x9e\xbd\x7c\xf9\xb2\x82\x79\x3c\x30\x64\xa7\xc9\x3d\xcd\x1b\xd2\xc3\x7c\x8f\x0a\xf2\xdf\xb5\xa7\x60\xa1\x7f\x7e\x7e\x5e\x87\x59\xd2\xec\x06\xa8\xa8\xd9\x58\xd4\x10\x3e\x27\x57\x74\xc9\x08\xf0\x46\x98\xbf\xe4\x4a\x65\xe4\x79\x68\x13\xf3\x3f\xff\xfa\xb7\x52\x7d\x68\xe8\x7e\x9c\xcf\x33\xbe\x12\x44\x6c\x57\xec\xd4\x13\x6c\x23\xc2\x5b\x0a\x93\x91\xa3\x1e\xc9\xb3\x39\x2c\x64\xcc\x67\x61\x74\x1c\xdc\xff\x55\x2e\xe2\x2d\xac\x21\xd0\x90\x10\x4f\x26\x72\xf4\x69\xcd\xd6\x2c\xb8\x1f\xfd\x01\xa4\x32\x06\xc4\x72\x11\xdc\x0f\xbf\x96\xd8\x2d\x10\xca\xb6\x5f\x4b\xa5\x6e\xeb\x75\x42\xe3\x50\x79\xd6\xc1\x78\x96\x46\xdb\x33\xb5\x2a\xe3\x88\xdf\x13\x1e\x9d\x7a\x68\xfc\x1e\x99\xc7\x34\xcf\xe1\x47\x9a\x08\xca\x13\x96\x79\x95\x7b\x94\x90\xcb\x34\xe1\x22\x35\x1f\xc9\xc7\x82\xce\x62\x56\x10\x50\x3f\xe4\xfb\x11\xc8\xc3\x57\x2b\x16\x35\x10\x14\x52\xe5\xec\xb5\xf1\xd0\xf5\x40\x28\xd9\x9b\xe3\xea\x59\x66\x7f\xa0\x1e\x46\x67\xd2\x32\x81\xb4\x85\xae\x01\xa6\xb4\x21\xdd\xe9\x37\x44\x40\x15\xba\x50\xe0\x89\x83\xe7\x4e\x61\x94\x5f\x3e\x45\x9a\x1f\x25\xc6\xff\x48\x9c\xd9\xea\x92\xe5\xfb\x49\x23\x41\xbb\xc4\xd8\xc9\xb0\x60\xba\xa4\x1b\x72\x4f\xe3\x35\xeb\xa6\x65\x32\x5f\x52\xf1\x8e\x6e\x76\x72\x77\x2a\x62\x7f\xd9\x78\xf2\x25\xb2\xf1\xe4\xcb\x64\x83\xd1\xb6\x65\xc3\x20\x7a\x90\xe1\x83\x21\x38\xa1\xc5\x25\x57\x34\x83\x20\x2c\x58\x96\x97\x2e\x7c\x9d\x66\xcb\x23\x8c\xee\xab\xa6\xa3\xc6\x74\xc6\x62\x02\xcf\x4f\xbd\x04\x80\xbc\xb3\x0b\x78\xa7\x31\xff\x9d\x45\xe4\x1d\x13\x8b\x34\x1a\x87\x12\xa6\x81\x97\xb3\x98\xcd\x85\xe4\x27\xf1\x6a\x9c\x30\x62\x64\x69\xdc\xe4\x15\x2a\x24\xb7\x04\x6b\x88\x25\xde\xd9\xaf\xf0\xbe\x93\xa9\x04\xfd\x43\x98\x66\xec\x06\x32\xf7\xc5\x1a\xe6\x7e\x29\xbf\xe6\x04\x7e\xcc\xa0\xb2\xd8\x21\x42\x85\xb8\x87\x1c\x80\x9a\xae\xb0\x44\x50\x76\x74\x3a\x3c\x1b\x8e\x43\x35\xd2\x0d\x38\x3a\x1b\xed\x07\x78\x7c\x76\x6c\x07\xdc\x57\x05\x79\xa9\x00\xbb\xf6\x0b\xfb\x2a\xa0\x89\x4c\xdb\x68\x6f\x51\xc4\x93\x1b\x55\x16\x0c\xa1\x28\xf0\xce\x0e\x1a\x02\xd4\x0c\x55\x0e\xcd\xb2\x36\x75\x8b\x23\xcc\xd6\x42\xc0\x0c\xb5\x7e\x67\x22\xf1\xf4\x6c\xbd\x7c\x3d\x5b\xa2\x09\xa0\x44\xfa\xfb\x99\xfa\x1c\x87\x0a\xab\xa9\x85\xba\xb7\x54\x3f\xcd\xaf\x65\x02\x94\x41\x16\x7e\x99\x39\x4f\x97\x55\xd5\xf3\xf2\xe1\x38\x54\x03\x35\x82\x20\x87\x74\xe2\xb1\x99\xbc\xfd\xeb\x75\x32\xc7\x35\xf2\xa3\xe3\x3e\xf9\xa6\x07\x45\x5a\xc9\x20\x0c\xef\x69\x46\xd6\x50\x77\x9e\x12\x6f\x21\xc4\xea\x24\x0c\x87\xa3\xef\x82\x01\xfc\x0d\x4f\xbe\x1d\x7c\x3b\x08\x6f\x98\x18\x45\xe8\x70\xe1\xf0\x6f\x27\xc3\x23\x28\x13\xe5\xab\xf9\x2b\x1c\xc0\xdf\x0c\xc2\x8f\x41\x1b\xec\x12\x4a\x53\x16\xc4\xe9\x0d\xf0\x0e\x74\xb1\xd2\x2b\x21\x90\x37\x52\xce\x81\xfb\xa4\xa6\x3a\xef\xe2\xfd\xc5\xb9\xd7\xaf\x8f\xfd\xe3\x55\x7b\xe4\xe3\xd5\x2f\x97\x1f\x9a\xc3\x7f\xbf\x6c\x8e\xfc\xf0\xdb\xc7\xf6\xe0\xdb\x8b\x0f\xe7\x97\x96\x71\x00\x6e\xb3\x52\xc0\xed\xf1\x9f\xde\x7f\xff\xfa\xfc\x75\x35\xeb\x69\x6d\x76\x18\x33\xe4\xec\xbc\x97\x3f\x7b\x7d\xe2\xbd\xb9\xfc\xfe\x07\xaf\x0e\x32\x5b\x65\x4c\x82\xd4\x87\x23\x76\x4d\xd7\xb1\xf8\x98\xd1\xe4\x86\xc1\xe3\x72\x11\x63\x96\xdc\x88\x45\xaf\x51\x6a\x67\x4c\xac\xb3\x84\xbc\xa3\x62\x11\xc8\x92\x5a\xc3\x91\xe7\x64\x44\x42\x28\xee\x7b\xe4\x90\x78\x47\x1e\xbc\xdb\x60\x8e\x15\x8c\x51\x33\x9b\xb2\x88\x54\xd0\xf8\x27\x05\x6b\x48\xa2\xbd\xb2\x29\x0a\x62\xa0\x3d\x35\xfa\x0c\x0d\x1d\x80\xfb\x9f\xd3\xf9\xa2\xb2\xca\xac\x4f\x78\x93\x06\xbe\x62\x72\x78\x4a\xfc\xc3\x2c\x60\x49\xd4\x23\x47\xf2\x6b\x2e\x68\x66\x18\x90\x14\xb5\x67\x53\x44\xec\x98\x8a\x96\xe2\x43\x0a\x35\xc4\xdb\x68\x63\x99\x4e\x5f\x75\x10\x7d\xdd\x18\xd9\x66\xf7\x00\x68\x52\x8b\x90\xa4\xfd\x3a\xb4\x55\x13\x86\xfe\x4a\xa5\xd5\x00\x4d\x47\xe9\xa0\x57\x03\xeb\x93\xb8\xcd\x6d\xc5\x37\x0c\x39\xc6\xb0\x9e\x0f\x2f\x9c\xc8\x9e\x84\x03\x83\x94\x9f\x6d\x32\x59\xa1\x9c\xc6\x1a\xc2\xda\x11\x1f\x01\xb8\x7c\x06\x1f\x63\x65\xbf\x81\xb2\x24\x18\x39\x3c\xb4\xad\x25\xbf\x26\xbe\x04\x9c\xf0\x29\xe0\x28\xb6\x16\x38\xb5\x82\x9a\x39\x87\x45\x1f\xbe\xb0\xc2\xcc\x32\x46\xef\xda\x8f\x1e\x0f\xdc\xbf\x50\x04\x4d\x7a\x4c\x06\x36\xe6\xd5\xac\x3b\xc8\xe4\xf3\x74\xc5\x82\x39\x8b\xe3\x2b\xa8\x58\x00\xf8\x01\x54\xed\xa3\xbe\xd5\xfc\x14\x91\x69\xcf\x82\x94\x5e\x5f\xe7\x4c\xd4\x5d\x1d\x5f\xa8\xd0\xf2\x19\x44\xde\x17\x16\x5c\xa7\xf7\x44\x0e\xef\x31\x59\x06\xab\x75\xbe\xf0\xd5\xf7\x5e\x0b\x52\xb3\x06\x67\x6b\xcc\xed\x39\xf1\xfd\xc3\x08\xdd\x0f\x16\x22\xd2\xbe\xd7\x3d\x51\xbb\x33\x2a\x50\x87\x47\x4a\xa6\x30\xf1\xcf\xf5\x61\x48\x3b\xc5\x93\x72\xae\x36\x5f\x4c\xd6\x4b\x00\x81\xec\xa2\x2a\x0e\xdf\x7b\x56\x15\x49\xbd\x20\x49\x23\xe6\xf7\x02\x99\xc0\xdd\x5a\x6d\x2f\x89\xcd\xd0\x81\x93\xd3\xbe\x11\x74\xbe\xc8\xac\x92\x60\xcc\xe5\x1d\xa2\x94\x8a\x60\x6e\x74\x0c\xde\x39\xeb\x9a\x10\xbe\x4c\x17\x07\x69\xfa\x40\xb2\xbd\xdc\xc8\x0a\x8d\x3c\x67\x41\xbe\x8a\x39\x30\x3a\xf2\xda\x50\x75\xab\x93\xf6\x63\xf7\x56\x0f\x18\x79\x27\x38\xf9\xbe\xfd\xb9\x34\x1b\x80\xd8\x4c\x06\x53\x07\x08\x58\x98\x04\x18\x4e\xdb\x1e\xdd\xeb\xf0\xc5\x30\x54\x62\xaa\x2d\x9f\x53\x15\xb8\xad\x10\x2a\x9a\x02\x88\xfa\x62\x31\x85\x05\x9f\xd7\x8d\xb0\xf6\x28\xc0\x32\xa5\xb1\x3c\xb2\x09\xd9\x69\x62\x88\x8c\x55\x40\x03\x59\x36\x13\x7b\x21\x17\xf5\x81\xfc\x74\x46\x74\x09\xef\xca\xdf\x31\xdd\xa6\x6b\x61\xcd\x75\xd0\x33\xe6\xb5\x8a\xb0\x8e\x09\xcb\xfa\x7e\x25\x2b\x98\x12\x55\x4d\x01\xbe\x35\xfd\xa0\x7c\x10\xb0\x5a\x84\x02\x1a\xb9\x23\x48\x85\x61\xa5\x13\xb1\xe0\x79\x4f\xff\xf8\x3e\x8e\x7d\x0f\x4b\xe1\x1e\x98\xe0\x32\xbd\x07\x1d\x59\xed\x18\x6b\x67\x53\xaf\x92\x86\xd5\xc6\x02\xba\x5a\x81\x99\x69\xaa\x56\x62\x3c\xc2\x22\xd8\x70\xba\x16\x14\xe0\x96\x74\x64\xbb\x02\xf2\x51\x21\x32\x1f\xdb\x30\xc8\xa6\x3c\xea\x05\xb8\x39\xe6\xc3\x17\x87\x8b\x63\x72\x36\xc9\x28\xc1\x81\x8e\xec\x37\x58\xe4\xd7\x3b\xba\x3e\x11\xd9\x9a\x15\x5c\x78\xa4\x98\x58\x69\x43\x1f\x26\xbd\x3a\x36\x75\xa8\x9a\x33\xcb\x84\xa5\x4e\x22\x2a\xa8\x5c\x1e\x4b\x52\x58\x09\x08\xfc\xd0\xd1\x5b\x34\x5f\xd3\x67\x37\x07\x25\xb7\x34\x6f\x10\x7d\x67\xd2\x2a\x5e\x3a\x6f\xb4\x57\x00\x5f\x8f\x9d\xbc\x54\x21\xf2\x05\xcc\xa2\x40\x55\x68\x4f\xe2\x29\x57\xfb\xe9\x9c\x2e\xe8\xb2\x1d\xbd\x1d\x7c\x64\x92\x03\xf8\x76\xb5\x23\x5d\x5b\xd5\x5d\xed\xf8\x0d\x76\x00\x12\x41\x74\xc6\xfe\x61\x5f\x75\x00\x35\x34\x4e\x3c\x09\xf1\x3d\x14\xf2\x04\x1d\x01\x2d\x64\x82\xae\xa5\x2d\x8b\x45\x6f\x93\x88\x6d\xa6\x72\x1a\x98\x99\x88\xd2\x5c\x37\xb0\x82\xb1\xeb\x11\xe7\x07\xc6\xdb\xc9\xc8\x5e\x08\xc6\x45\x57\xb2\x83\xaf\x1d\x9b\x27\xab\xb5\xa8\x05\x61\x74\x4f\xb3\xf3\x2a\xda\x2d\x5b\x62\x72\x2d\x88\x35\x2a\xed\x13\x80\x50\x9a\xaf\x42\xc6\xa2\x59\x13\x29\x51\xe4\x40\xb7\x7f\xca\xb8\xe2\x59\xca\x0d\x3b\x92\xdc\x84\xf1\x3d\x99\x6d\x11\x71\xf8\x2d\xee\xc0\x80\x3e\x9a\xa5\xa0\x2b\xa9\xa4\xc9\x35\xbf\x69\x97\x7c\xb0\x84\x23\x2e\x0b\xf0\xc6\x83\x5a\x4b\xd4\x68\xe7\x68\xb4\x35\xb3\x13\xcb\xb2\x14\x0a\x1f\x48\x95\xb0\x84\xad\xd6\x14\x7b\x00\x09\xd1\x23\x62\x91\xa5\x0f\x44\xfe\x68\xf5\x49\x20\x5d\x50\xec\x4b\x68\x4a\x50\xbc\xd4\xa0\x2c\x85\xc0\x3e\x61\x57\x87\x5c\x83\x85\x05\xc6\x15\x77\x77\xc7\xdc\x2f\x89\xb7\x45\x50\xda\x55\x7a\x49\xfa\xfb\xc7\x3b\x4d\x56\xce\x71\x12\xed\x2c\xec\xb4\x4a\x8a\xfd\x92\x42\xeb\x43\xb7\xd6\x75\x05\xf5\x64\xad\x4b\x16\xff\xe7\x5a\x97\x73\xdc\x43\xeb\xe8\x0f\xa6\x5a\x82\x22\x9c\x9e\x92\xa1\x8d\x85\x45\xff\xab\x0c\x0a\xcf\x4c\x6c\x31\x36\xe5\x78\x5a\x10\x15\x45\x4b\x47\xe1\xae\x79\x62\xcc\x36\x16\x7b\x34\x75\x01\xed\xdf\xf6\xea\x18\x02\x73\xc7\x58\xd8\xd5\x9b\xd6\x9a\x25\xc9\xaa\xe7\xb4\x35\xb3\xa5\xb4\x67\x55\xab\x2c\x06\x07\x99\x99\x94\x05\xd9\xd3\x94\xb4\x1e\x47\x95\x8b\x77\x0f\x5a\x2d\x2a\xbe\x6c\x6d\xea\x7e\x9c\x9c\x9d\xac\x9c\x3a\x30\x54\x3d\x9f\xb1\x06\x96\x14\xd8\x69\x1f\xc5\x9e\xfd\x53\x6b\xfa\xaa\x27\xdf\x93\x9a\x74\x6e\x7c\xeb\xb5\x93\x7c\xd1\xc0\x6a\xe7\xae\xe7\xd1\x60\x4e\x81\x8a\x6e\x71\x2c\xc8\x61\x58\xa2\x6f\xa0\x4f\xae\xe4\x7e\xd1\x65\x57\x4f\x91\x7a\x62\xe8\x77\xda\xdb\x1d\x82\x2c\x62\x1f\x34\x36\x5c\x72\xfe\x7b\x53\xb3\x45\x07\x59\xf8\xd9\xf1\xd4\x96\x99\xbf\xf1\x1f\x78\x12\xa5\x0f\x38\x4d\x49\xc4\x69\xdb\x2d\x26\x8f\x86\x46\xf4\xf6\xa1\xda\x1b\xeb\xdc\xb9\x29\x0f\x3c\x1a\x4b\x5d\x1d\x84\xb4\x35\xa1\xce\x2b\xf4\xa9\x88\x0d\xcd\x6b\x6f\x66\xe2\x91\x48\x1d\x16\x47\x1a\x80\x25\xd3\xa2\xba\x51\xc5\x06\xb8\x78\xa5\x17\x35\xe4\xcb\x9d\x74\x59\xf0\x74\x12\x28\xca\x23\xbf\x22\x20\x87\x7c\xdc\xcb\x1e\x0d\x06\x76\x32\xc5\x56\x86\x03\xa9\x06\x5b\x6e\x6a\xb4\x45\x74\x5a\xa4\x79\xb1\x40\x37\xab\xb6\x9d\xe6\x36\x8a\x3e\xfd\xd7\x38\x52\x28\xdb\x1e\xa7\x7b\x2b\xc6\xbe\x11\xe3\xda\x14\x64\xd9\x3d\xc3\xed\x34\xaf\x3a\x59\x89\x8e\x3f\xaa\x9b\x33\xf2\xdd\x1f\xd5\xd9\x07\x50\xb6\x83\xf3\x80\xe0\xb7\x79\x9a\xf4\x0b\x0a\xa0\xe3\x50\xd6\x20\xde\xde\xe0\x32\x13\xee\x0f\x1e\xf3\xbc\x59\x5e\x77\x40\x4b\x5f\x6c\x82\xd3\x07\xca\x65\x6c\x90\xe5\xac\xe1\x4c\xe6\x32\xe8\x13\x47\x9d\x80\x62\x3e\xbf\xdb\x95\x7f\x8a\x2d\x54\x4b\x44\x89\x53\x1a\xbd\x2e\xe2\xe6\xa5\xe4\x6a\xcd\x04\x8d\x33\x3c\x0c\xb2\x5d\xb1\x2f\x7c\x6e\xf1\xf2\x38\xc6\x8b\x5e\x66\x34\x88\x76\x65\xcb\xa8\xab\x78\xb8\x0a\x44\x9a\xc6\xf9\x0f\x4c\xbc\xe4\x09\xcd\xb6\xef\xa8\xc8\xf8\xc6\x5f\x67\x71\xbf\xe4\xd6\x8e\x02\x73\x81\x8d\x85\xb2\xe5\xa2\xe3\x03\x05\xbd\x4a\x13\x69\xd0\xde\x28\xf2\x7a\x8e\xc3\x0e\x75\x10\x42\xf0\xdc\x60\x03\xdd\x24\xc4\x7f\xb2\xb1\x27\xcf\x12\x65\xab\x50\xb6\x80\xb2\xd5\x28\x5b\x77\xbe\x05\xd9\x82\x6b\x1e\xc7\x57\x18\x39\x50\x4a\xbc\x0d\x27\xb5\x3d\xd9\x4c\x27\xdb\xa9\x25\x37\x99\x68\x97\x68\x20\x1b\xf2\x9c\x14\x3b\xf7\x7d\x60\x6c\xfe\x6a\x7f\xb3\x50\xec\x3a\x3b\x31\x6e\xd3\x15\x05\xc9\xa5\xb5\xf3\xca\x9d\xad\x17\xbe\xea\xd6\xa4\x10\xda\x76\x67\xc2\x14\xc4\xac\x95\x02\x5e\x91\x39\x25\x6f\x21\x83\x82\xc7\x6e\xed\x20\x14\x17\xef\xc8\x09\xa3\x82\x12\x6e\x82\xda\x0b\x2c\xcd\xbf\x5d\x7f\xa2\xd1\x74\xd4\xe1\x46\xd9\x06\x3e\x2c\xf2\xfb\x9f\x69\x96\xb3\xcb\xf4\x21\x97\x98\x3d\x60\xb9\x32\x4e\x40\x21\x74\xef\xde\x36\x02\xa8\x3a\x9a\x2a\x19\x3b\x10\x0b\x49\x30\xc3\x1e\xda\x8f\x0c\xcc\x17\x76\x03\xa8\xd3\x33\x72\xbf\x8b\x2a\xbe\x94\xfa\xef\x3b\xe1\xda\x25\x62\x8b\x21\x45\xbf\xda\x8f\xa1\x5c\xcc\xaf\x61\xa8\x35\x79\x6f\xf7\x27\x89\xef\xf0\x35\xd7\xb8\x25\x40\xda\x01\x2b\x4b\x53\x95\xb5\x8a\xa5\xfb\xb4\x7f\xb5\x83\x5b\x50\x7a\x1f\xf4\x00\xa1\x1f\xbf\xa1\x4a\xda\x08\x66\xd6\xd0\xf7\xd5\x74\xda\xde\x0b\x9c\x27\x25\x38\x4f\x2c\x22\xea\x99\xc8\xd5\x87\x77\xa7\x4f\xe1\x62\xc1\xbb\xc5\xa7\xa0\x0f\xc1\x32\xb7\x23\xe0\x60\xe9\x8d\x50\x8d\x73\x3a\x9a\x44\x86\x22\x6b\x31\xa9\x3c\x40\x2d\xdd\xa3\xe5\x9c\x7a\xf5\xcd\x93\xd1\x09\x9f\x3a\x2a\x10\xcd\xbf\xa3\x86\x75\xd4\xac\x66\xa9\x5f\xd4\xa4\x8e\xce\x61\x47\x2d\xab\xc8\x15\xb5\x7f\x49\xcb\xdc\xb3\xb3\x16\xbd\x3a\xc9\x29\xb8\xb2\x8e\x35\xeb\x2f\xe7\x1e\x46\x51\xb4\x1a\xc5\x9c\x25\x95\x62\x7a\xd2\x12\x43\xc2\x65\x3f\x81\x61\x42\x43\x93\x2e\x29\x4f\xfc\x49\x65\x1e\x87\x64\x18\x0c\xfa\x95\x3d\x40\x87\xa3\xf6\x54\x27\xde\xb3\x37\x6f\xce\x51\xfe\x67\x6f\x86\x23\x6f\xea\x60\x71\x85\xc4\x77\xd6\x0d\x18\x44\x78\x7e\x41\x2f\xe0\xf1\x8e\x6d\x11\x95\x57\x07\x96\x4e\x96\xb0\x38\x67\xfb\x20\x5b\x0e\x5f\x9a\x89\xb3\x35\x19\x3c\xf3\xa9\x9f\xa7\x16\xbb\xf6\x2d\xd0\xbb\xfd\xee\x5c\xc4\xce\xf6\xbd\x84\xbe\xc5\xfd\x8f\x17\xf0\x21\xa1\x6f\xdd\xc5\x47\x51\xe1\x28\x87\x00\xaf\xb1\xc7\xaf\xa2\xaa\xd1\x60\xb7\x0e\x30\xe5\x36\xba\x24\x53\x86\xd8\x27\x1b\x28\x48\xfa\x86\xe3\x4e\xee\xa6\xfd\xc6\x65\x83\xbe\xb1\xe4\xf6\x52\xf4\x0e\x6f\x28\x58\xae\x83\xb8\xea\x96\x47\xf3\x96\x1b\xc9\x05\x15\x7c\x5e\x9a\x92\xc5\xd5\x95\xcc\xa6\xb9\x95\xe2\xab\x39\xc3\x24\x8a\x2f\x30\x89\x5a\x55\x55\x89\x6e\xeb\x73\x9f\x5c\x79\xd6\x93\x8a\x64\x06\x6f\x81\xed\x28\xc2\x56\xa4\x56\xb0\x4f\x2a\x54\x01\x6d\x32\x98\x96\x98\x4f\xad\x57\xe5\xfc\x51\xd8\x27\xd4\xac\xc5\xd5\x13\xd2\xa8\x5e\xcb\xf1\x2f\xa8\x63\xdb\x0a\x84\xda\xf8\xb0\x58\xc4\x1e\x34\xe4\x5b\x24\x5c\xfe\x2c\x49\x3d\xc1\xb2\xcc\xe5\x55\x3e\x7d\x05\xc6\x93\xdc\x98\xd6\x93\x3a\xd2\x4f\x8a\xbb\x3d\xd8\x0b\xca\xe3\xb2\x54\x5d\xab\x29\x2f\xe7\xa5\x78\xdd\xc6\x66\xc3\x32\x90\xe8\xae\xad\x6e\xa4\xba\xe3\x71\xdc\xc2\xb3\x05\x9e\x16\xe0\x8a\xf2\x6c\xcf\x5b\x30\x7f\x64\xe8\x91\x6c\x55\x39\x34\xe1\x7d\x72\x3b\xdd\x7f\x0d\x2a\xed\xeb\x3b\x5b\x8d\x8b\x7d\x7e\x6d\xde\xb5\x84\xd6\x48\x85\x18\x1d\x3e\xbc\x7f\xfd\x9e\x3c\x70\xb1\xd0\xfb\x2f\x58\x67\xe8\xad\xf0\xea\x6a\x7b\x3d\xc7\x9a\x45\x59\xbe\xc4\x25\x54\xa2\x78\x7d\xfd\xc5\xbd\xa1\xa2\xfe\x81\x41\xd7\x58\x1d\x97\xa9\x70\x7e\x9f\x64\x9e\xed\xda\xf8\xc0\x17\x4c\xc1\xb8\xa7\xfb\x19\x0c\xec\xf1\xe4\xb3\x34\xac\xc7\xa3\xcf\x60\x50\x8f\x72\x6c\x54\x0c\x8e\xd4\xe8\x08\x86\x15\x63\xf8\x82\x98\xf0\x81\x9b\x1f\xf0\x81\x97\x10\xa8\x68\xab\xfb\x86\x25\x2c\xa3\x82\xfd\x82\xff\x2c\xf4\xab\xbc\x36\xdc\x9d\x9d\x11\x89\x36\xcd\x70\x12\x41\xa0\x69\x37\x5b\x72\xb3\xce\x02\x3b\x74\xc0\xea\x6b\xcb\xc6\xcc\xd1\x83\x4c\x7f\xf4\xa9\xdc\x65\x6b\x8f\xcf\xcc\x71\x69\x41\xc5\xcf\xc6\x95\x9f\xf6\xb0\xbc\xcc\x83\xc3\xb8\x7c\x9e\xa5\xba\x55\x27\x30\x59\xdc\x61\xb9\xca\xf0\xf7\x3e\xd4\xa8\x26\xdb\xd4\xbf\xad\x1e\xf9\x54\x6d\x3f\xa9\x2e\xb5\xdc\x7e\x02\x1a\x9d\xdb\x37\x9f\xaa\x9d\xa8\x32\xac\xb4\xfe\xdd\xef\x51\x5e\x23\xbf\x95\x12\xf4\x7a\x07\xd5\xff\x77\xe1\x3f\x78\xc9\x7f\xa1\xfc\x6f\x00\x00\x00\xff\xff\x6c\xd7\xdc\xf8\x5a\x39\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 14682, mode: os.FileMode(436), modTime: time.Unix(1484802272, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
