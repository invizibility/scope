// Code generated by go-bindata.
// sources:
// index.html
// lib.js
// lib.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xd1\x52\xf3\x20\x10\x85\xef\xf3\x14\xfc\xdc\x27\xcc\xaf\x5e\x92\xdc\xfa\x00\x3e\x01\x09\x5b\xa1\x12\x40\xd8\x46\xf3\xf6\x6e\xa1\x3a\xcd\x4c\x1d\xeb\xd4\xdc\xc0\x2c\xe7\x7c\xec\xec\x09\xd2\xe0\xec\x86\xa6\x91\x06\x94\x1e\x1a\x46\x9f\x44\x8b\x0e\x86\x47\xf0\x61\x06\xf6\x34\x85\x08\x52\xd4\x5a\x3d\x77\xd6\xbf\xb0\x04\xae\xe7\x19\x57\x07\xd9\x00\x20\x67\x26\xc1\xae\xe7\x62\xca\x59\x8c\x21\x60\xc6\xa4\x62\x37\x5b\xdf\x51\x85\x5f\xe3\x74\x76\x3c\xd7\xe6\x29\xd9\x88\x0c\xd7\x08\x3d\x47\x78\x47\xb1\x57\x8b\xaa\x55\xce\x72\x9a\xaa\x45\xe8\xfb\x6e\x79\x28\x17\xed\xc9\x2b\x45\x55\xfc\x1a\xd2\xbe\x1e\xe0\x00\xdd\x72\xf7\x07\xa8\x04\x04\xcb\xd8\x2d\xff\x6f\x85\xed\x09\x94\xd6\x5b\x29\xdb\x3c\xb6\x20\x29\x6a\xf2\x8d\x1c\x83\x5e\x69\x2d\xe4\x7f\x6d\x5b\x37\xda\x2e\xcc\x6a\xa2\x87\xc8\xd9\xe4\x54\xce\x3d\x9f\xc1\x1f\x4e\x29\xd5\x54\xd5\x08\x8e\xed\x42\xea\xf9\x9b\xd5\x68\xf8\xc0\xca\xca\xa4\x28\x47\x03\x75\x1a\x95\x2f\x9c\x93\x80\xee\xa7\xca\x65\x86\x01\xfb\x6c\x90\x20\x75\x73\x89\xf2\x29\x39\xc7\x48\x41\xbd\x0e\xdb\xae\x1d\xec\xf0\xab\xed\x29\x78\x54\xd6\x43\xe2\xdf\x1b\x66\x12\xfc\x6c\x68\xdb\xe3\xdc\xea\xbc\xae\x09\xe1\xf8\x67\x6f\xa7\xde\x1c\xe7\x5e\x5e\xde\x47\x00\x00\x00\xff\xff\x61\x16\xf4\x09\x81\x03\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 897, mode: os.FileMode(420), modTime: time.Unix(1485460952, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x56\xcb\x72\xdb\x36\x14\xdd\xeb\x2b\x30\x68\x16\x64\xcd\x50\x8a\xb4\xf4\x64\x61\x25\xaa\x95\x69\xea\x34\x6a\xda\x2c\x3c\x1e\x0d\x44\x42\x22\x52\x04\x54\x41\xd0\xb2\xab\xe8\xdf\x73\xf1\x22\x41\x3d\x2c\x79\x41\x13\xf7\x1e\x1c\x1c\xde\x17\xf4\x48\x24\x9a\xb2\x77\xe8\xad\x79\xfe\xf8\x81\xb6\xbb\xeb\x9e\x36\x8e\xd9\xea\x2b\x5b\x81\xdd\xbd\x38\x57\xb4\xac\x45\xa6\x58\x29\xa2\x71\xbc\xed\xf5\x10\x1a\xa7\xb7\x54\x01\xac\xb1\xff\x3d\xfb\x90\x64\x84\xf3\x05\xc9\xfe\x8d\xd1\x16\x20\xfa\x4f\x53\x66\xa5\x58\x1a\xca\xed\x2e\xb0\x4a\x4a\xf2\xe7\x90\x80\x4a\x59\xca\x44\xd2\xaa\xe6\xaa\x8a\x3d\x01\x72\xdb\x53\xe0\x07\x34\x3c\xf7\x1d\x59\x21\x2b\xf0\xb8\x8d\xf7\x83\x87\x7d\xc0\x82\x89\x8a\xfd\x4f\x43\xd0\x9b\x00\xe4\x34\x47\x16\x1d\x3b\x87\x97\x9a\x8f\xe6\xff\xd5\xb4\xa6\xa9\x79\x46\x43\xef\x4f\x73\xba\xa4\x32\xca\x47\xe9\xb7\xaa\x14\x89\x16\x86\xae\x10\xee\x73\x56\x29\x7c\x0e\xe4\x15\xb5\x40\xb2\x21\x4c\xdd\x70\x1e\x99\xb0\xc4\xd7\x3d\xab\x61\x17\xd9\x34\xc4\x60\x09\x72\x30\xb5\x39\xd0\x61\x14\xa5\xfc\xae\xbf\xec\xde\x31\xe1\xbb\x4f\x77\x13\x9c\xf8\xd5\x3f\xef\xc2\xf7\xf9\x5f\x9f\x67\x5f\x5a\xc3\xef\xb3\xf6\xfd\xf6\xeb\x3c\x5c\x7e\xb8\xfb\x32\x99\xcd\xf7\x00\x21\x99\x05\x84\x96\x8f\x9f\x6e\xde\x4f\xde\x63\x58\x3e\x38\x6d\xb5\x60\xca\x68\xc3\xe3\x3f\x71\x82\xf0\x6f\xb3\x9b\x5b\xec\x9d\x10\x1a\x02\xb9\x98\x4b\x22\x56\x34\xac\x03\x4e\xc5\x4a\x15\x6d\x09\x49\xaa\x6a\x29\xd0\x1f\x44\x15\xa9\x2c\x6b\x91\x3b\x04\xfa\x15\x0d\x51\x1f\xbd\x19\xc4\x3a\xa6\xaf\x31\x3c\x8f\x61\x46\x16\xd3\xb3\x29\xd5\x27\xab\x52\x11\xfe\xd1\xfa\x83\x73\x25\x5d\xc1\xbf\xaa\x5b\xbb\x1c\x10\x83\xeb\x46\x89\x41\xa4\xcb\x52\x4e\x48\x56\xb4\xf9\x90\x09\x62\xed\x3e\xfd\xc7\xd1\xd5\x5b\x14\x5d\xc9\x94\x8a\x3c\x46\xaf\xcd\x6b\xa5\x88\x54\x4d\x7d\xc5\xdd\xcf\xe3\x46\x20\x3c\xa6\x97\x34\xd6\x0b\x0d\xe4\x6b\xbc\xd5\xc3\x96\xc8\xfa\x62\xa4\x0a\x59\x6e\x90\x59\x5c\xbf\xd8\xa1\x27\x9a\xce\x99\x7d\xd1\x1d\xf4\x9c\xf3\xfb\xc4\x1f\xb4\xdb\xf1\x96\x1d\x1e\xba\x87\x2c\x7f\x3a\xa2\x47\x6f\x3c\x0c\x7f\x7e\x10\xfe\x2e\xd1\x7d\xfe\x00\x5c\x6c\x3f\xf2\x7e\x3c\xac\x65\x67\x36\x8c\x1a\x35\xc7\x26\x83\x15\x74\x6a\x2a\x9c\x6e\x79\x13\x32\x7c\x1e\x67\x42\x77\x01\xae\x33\x67\x5e\x98\x34\xfa\xe3\x42\xdc\x91\x41\xa3\xc7\x0c\xdc\x02\x66\xc6\x04\x43\x26\x1f\x25\xaf\x92\x69\x32\x36\xa3\x58\x57\xc9\xa2\x34\xf5\x06\x67\x54\x94\xd3\x4c\x45\x58\x5b\x0c\xb9\x76\x57\x59\xb9\xa6\x3e\x67\xb6\xcf\xd6\xb0\xd4\x98\x94\xac\xd7\xd0\x08\x11\xce\xd9\x23\x8e\x53\xa2\x94\x8c\x30\xcb\x71\x82\x01\xe3\xd4\xa5\x19\x27\x55\x45\x01\x04\xe1\x56\x84\x09\x2a\x71\xa2\x64\x4d\x3d\xff\x77\xb0\x9d\xe5\xd3\xa0\x4b\x09\x39\x5d\xaa\xb3\x84\x1a\x74\x09\x21\x7c\x48\x43\xc2\xc9\x82\xf2\x86\x06\xca\x15\x78\x36\x2c\x57\x05\xd8\x14\x7d\x82\xc0\xb9\x95\x13\x62\x56\xa0\x24\xe4\xa8\xd6\x44\x74\x95\xb4\x7b\xce\x9d\x55\x50\xb6\x2a\x54\x73\x98\x5f\xba\xd3\xec\xf2\xec\x71\x7b\xbb\x32\x22\x1e\x89\x6e\x13\x1d\xe1\x66\x9b\xb5\x1a\xd0\xab\x68\xc3\x44\x5e\x6e\xe2\x14\x2a\x0e\x2e\xb7\xb6\x90\xc2\x51\x6e\x3c\x66\x18\x7b\x62\x6b\x0b\xe7\x58\x8b\xef\xf7\xdb\xa3\x21\x33\xdd\xe2\xfb\xa5\xb1\x37\xf5\x6d\x4a\x30\xf5\xe1\x6c\x15\x19\x4b\xa4\xe7\xf0\x70\x30\xe8\x60\x9b\x60\xb4\x60\x6b\x32\xe8\xd1\xa0\x19\x05\xfa\x28\x17\x1e\x9b\x88\x24\x3c\xcd\x47\xce\x05\x2d\xe9\xb0\x7b\x75\x26\x72\x95\x7a\xe6\xf4\x04\x10\x1a\x76\xfd\x84\x8f\xc1\x8f\x1c\x89\xba\x68\x63\xb3\x09\x0f\x75\x39\xaf\xe5\x0f\xdd\x5d\x69\x50\xd0\x55\xc9\x69\xca\xcb\x95\xf5\xc7\x3d\x77\x61\x06\x29\xd3\xb9\xb0\x17\x02\xee\x17\x2c\xc3\xfe\xb2\xb2\x37\x54\xcb\x10\xfb\x9f\x87\x11\xc6\x5d\xfb\x4e\x0f\x95\x6f\x9f\x6b\x2a\x9f\x13\x98\x38\x49\xfb\xe3\xe6\x67\x00\x00\x00\xff\xff\xdb\xbd\xf4\xe9\x90\x0a\x00\x00")

func libJsBytes() ([]byte, error) {
	return bindataRead(
		_libJs,
		"lib.js",
	)
}

func libJs() (*asset, error) {
	bytes, err := libJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib.js", size: 2704, mode: os.FileMode(420), modTime: time.Unix(1485465462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x5d\x6a\xc3\x30\x10\x84\xdf\x7d\x0a\x41\x28\x85\x80\x89\x2b\xea\x06\x9c\x37\x83\x4f\xd0\x13\xac\x2d\x45\x5e\xaa\x1f\x23\x29\x6d\x68\xc9\xdd\x2b\x7b\x65\x5c\x4a\x28\xd5\x9b\xbe\x65\x76\x66\x67\xa7\xe5\x39\xb2\xaf\x82\xa5\xf7\x81\x22\x8e\x0d\xe3\x55\x35\x5d\x4f\x0b\x99\x5c\xc0\x88\xce\x36\x0c\xfa\xe0\xf4\x25\x4a\xe2\xb3\xa8\x61\x15\x7d\xa2\x9b\x92\xa8\xa6\xcf\x28\x51\x8d\x69\xf6\x54\x55\x0f\x44\x7a\x18\xde\x94\x77\x17\x2b\xca\xc1\x69\xe7\x1b\xb6\x6b\xdb\xf6\x54\xdc\x8a\x62\x67\x00\x6d\x36\x37\x68\xcb\x55\x7c\xdc\x12\xdc\x51\x77\x5d\x47\x33\x03\x5e\x25\x15\x85\xf9\x91\xfa\xb0\x67\xaf\x60\x24\x83\xb0\x04\x7d\x0c\x74\x19\xdb\x1f\x16\xd3\x94\xf7\x8e\x27\xaf\xff\xb0\xe4\x2f\x75\xd7\x1e\x69\x4c\x6c\x4b\x91\x5b\xdb\x0e\x7e\x97\x3e\xe2\x00\xba\x04\x8d\x2a\x55\x67\x50\x08\x9d\x8b\x8b\xf2\x1a\x57\xee\x67\x63\xc2\x67\x67\x63\x19\xf0\x53\xa6\x3d\x3c\x57\x0f\x42\xa0\x55\xa5\x5f\xfb\xfc\xd7\x75\x1a\x7a\xa9\xe9\xba\x75\x01\xd5\xf3\x9c\xe5\xbf\xd6\xf2\x19\xdf\x8a\xef\x00\x00\x00\xff\xff\xe9\xf4\xef\xcc\x06\x02\x00\x00")

func libCssBytes() ([]byte, error) {
	return bindataRead(
		_libCss,
		"lib.css",
	)
}

func libCss() (*asset, error) {
	bytes, err := libCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib.css", size: 518, mode: os.FileMode(420), modTime: time.Unix(1485462180, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"lib.js": libJs,
	"lib.css": libCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"lib.css": &bintree{libCss, map[string]*bintree{}},
	"lib.js": &bintree{libJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
