// Code generated by go-bindata.
// sources:
// index.html
// lib.js
// lib.css
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\x4d\x52\xc4\x20\x10\x85\xf7\x39\x05\xc5\xde\x50\xfe\x2c\x49\xb6\x1e\xc0\x13\x10\xe8\x11\x46\x02\x08\x3d\xd1\xdc\xde\x9e\x10\xad\x89\x35\x96\x63\x8d\xd9\x24\xd5\xbc\xf7\x75\x57\xbf\x20\x2d\x8e\xbe\x6f\x1a\x69\x41\x99\xbe\x61\xf4\x48\x74\xe8\xa1\x7f\x84\x10\x47\x60\x4f\x3a\x26\x90\xa2\xd6\xea\xb9\x77\xe1\x85\x65\xf0\x1d\x2f\x38\x7b\x28\x16\x00\x39\xb3\x19\x76\x1d\x17\xba\x14\x31\xc4\x88\x05\xb3\x4a\xed\xe8\x42\x4b\x15\x7e\x89\xd3\xbb\xe1\x54\x5b\x74\x76\x09\x19\xce\x09\x3a\x8e\xf0\x8e\x62\xaf\x26\x55\xab\x9c\x95\xac\xab\x45\x98\xfb\x76\x7a\x58\x1a\xed\xc9\x2b\x45\x55\xfc\x19\x72\xf3\x7a\x80\x03\xb4\xd3\xdd\x3f\xa0\x32\x10\xac\x60\x3b\xdd\x5e\x0b\xdb\x13\x28\xcf\xd7\x52\xb6\x79\x6c\x41\x52\xd4\xe4\x1b\x39\x44\x33\xaf\x60\xe3\x26\xe6\x0c\x31\x63\xe2\x4c\x7b\x55\x4a\xc7\x47\x08\x87\x35\x9b\x9a\xa5\x1a\xc0\xb3\x5d\xcc\x1d\x7f\x73\x06\x2d\xef\xd9\xf2\x66\x52\x2c\x47\x3d\xcd\x97\x54\x58\x38\xab\x80\xba\x52\xe5\x3c\xc3\x82\x7b\xb6\x48\x90\xfa\x71\x8e\xf2\x29\x39\xc5\x48\x41\xb3\x7e\x9b\xda\xc3\x0e\xbf\xc6\xd6\x31\xa0\x72\x01\x32\xff\xd9\x30\x92\xe0\x37\x83\x14\x75\x3f\x97\x2c\xfd\xf8\x27\x6f\xb7\xdc\x1c\xf7\xbc\xdc\xb4\x8f\x00\x00\x00\xff\xff\x20\xcb\x0c\x5a\x71\x03\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 881, mode: os.FileMode(420), modTime: time.Unix(1485460634, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x92\x4d\x6e\xc3\x20\x10\x85\xf7\x3e\x05\xa2\x59\x80\x9a\x92\xa8\x59\x46\x3d\x44\x8f\x80\xcc\x34\xa6\x72\xc1\x32\xc4\x4e\x1a\xf9\xee\x65\x0c\xf1\x9f\x28\x1b\x5b\x6f\xbe\x37\xbc\x19\xc1\xbe\xae\xa6\xf4\xda\x1a\xa6\x4e\xfb\x1d\x7f\x14\x84\x74\xb2\x25\x3f\x52\x9b\x73\xf8\xc7\x2f\xf9\x20\xea\x24\x1c\xd4\x50\x7a\x46\x5f\x50\xa2\x3c\x71\xae\xb4\x0d\x04\xe0\x31\x20\xbd\x63\xbd\x36\xca\xf6\x5c\xb4\xe0\xf4\x2f\xcc\xcd\x39\xc1\xce\x78\x52\x05\x1b\x0c\xfc\x9c\xda\x44\x31\xf4\xc9\x18\x0e\x07\x24\x4a\x69\x3a\xe9\x94\xee\x36\x69\x26\x7d\x8c\x84\x67\x8c\x24\xa2\x9e\x8d\x2e\x64\xd3\x80\x51\x8c\x46\x66\x32\x62\x55\x38\x7f\xaf\x81\xd1\x0a\xf4\xa5\xf2\x74\xbf\x18\x29\x4a\x21\xd8\x2b\xa1\xcd\x2d\xeb\xea\xb5\xf2\x55\x30\xb1\xd9\x35\x4a\xc1\xf4\x46\xde\x8f\xc7\xad\x37\x46\x1d\x91\x90\xf4\x1f\xd3\x8a\x8d\x21\x56\xf0\x33\x57\xe2\x96\xf3\xc6\x3c\x5c\x78\xb8\x79\xb6\xb8\x2c\xc7\xa6\x89\x57\x70\xd4\x9e\x74\x69\x8d\xb3\x35\x88\xda\x5e\x62\x3d\xb7\x71\x21\xbd\x6f\xe7\x4d\x2c\x2f\x4d\xa5\x69\xb5\xdb\x3b\x86\x62\xf1\x3a\x06\x7c\x8f\xdf\x9f\x57\x68\xef\x9c\x17\x7f\x01\x00\x00\xff\xff\x40\x47\x6e\xdd\xa6\x02\x00\x00")

func libJsBytes() ([]byte, error) {
	return bindataRead(
		_libJs,
		"lib.js",
	)
}

func libJs() (*asset, error) {
	bytes, err := libJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib.js", size: 678, mode: os.FileMode(420), modTime: time.Unix(1485460588, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _libCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x90\x4d\x6a\xc3\x30\x10\x85\xf7\x3e\x85\xc0\x94\x42\xc0\x44\x35\xb8\x01\x67\x67\xf0\x09\x7a\x82\x89\xa5\xc8\x43\xf5\x63\xa4\x49\x1b\x5a\x7a\xf7\x2a\x1e\x1b\x77\x11\x4a\xb4\x9b\x37\x3c\xbd\x6f\x5e\x69\xf5\x99\xc4\x77\x21\xf2\xfb\x44\x45\x63\x2b\x6a\x29\xa7\xeb\x71\x56\xa6\x90\x90\x30\xf8\x56\xc0\x29\x05\x7b\x21\xcd\xfa\xcd\xd4\x0a\xc9\x03\x85\x29\x9b\x1a\x1e\x46\x8d\x66\xcc\xbb\x17\x29\x9f\x58\x39\xc1\xf0\x6e\x62\xb8\x78\x55\x0d\xc1\x86\xd8\x8a\xb2\xeb\xba\x63\xf1\x53\x14\xa5\x03\xf4\x4b\xb8\x43\x5f\xad\xe6\xc3\x46\x70\xc7\xdd\xf7\x3d\xef\x1c\x44\x93\x5d\x0c\xf3\x87\x7a\xbf\x13\x6f\xe0\xb4\x80\x34\x83\x3e\x27\xbe\x4c\xec\xf6\x73\x68\xe6\xbd\x93\x59\x37\xff\x44\xd6\xaf\x4d\xdf\x1d\x78\xcd\xda\x46\xb1\xb4\xb6\x1d\xfc\xa1\x23\xe1\x00\xb6\x02\x8b\x26\x57\xe7\x50\x29\xbb\x14\x47\xfa\x4a\xab\x1e\x6f\xc1\x2c\x9f\x83\xa7\x2a\xe1\x97\xce\xff\xd4\x4b\xf5\xa0\x14\x7a\x53\xc5\xb5\xcf\x87\xae\xfb\x0d\x00\x00\xff\xff\xbf\x55\x42\xe7\xcf\x01\x00\x00")

func libCssBytes() ([]byte, error) {
	return bindataRead(
		_libCss,
		"lib.css",
	)
}

func libCss() (*asset, error) {
	bytes, err := libCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib.css", size: 463, mode: os.FileMode(420), modTime: time.Unix(1485459838, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
	"lib.js": libJs,
	"lib.css": libCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
	"lib.css": &bintree{libCss, map[string]*bintree{}},
	"lib.js": &bintree{libJs, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
