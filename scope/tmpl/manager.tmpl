{{define "title"}} Scope{{.Version}} {{end}} {{define "html"}}
<html>

<head>
    <title>{{template "title"}}</title>
    {{template "lib"}}
    <script src="/plugins/editablegrid/editablegrid.min.js"></script>

    <link rel="stylesheet" href="/plugins/editablegrid/editablegrid.css" type="text/css" media="screen"> {{template "css"}}
    <style>
        h1 {
            font-size: 15px;
        }

        a {
            color: #548dc4;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        table.datagrid {
            border-collapse: collapse;
            border: 1px solid #CCB;
            width: 800px;
        }

        table.datagrid td,
        table.datagrid th {
            padding: 5px;
            border: 1px solid #E0E0E0;
        }

        table.datagrid th {
            background: #E5E5E5;
            text-align: left;
        }

        input.invalid {
            background: red;
            color: #FDFDFD;
        }
    </style>
    <link rel="stylesheet" href="/style0/snow.css">
</head>

<body>
    {{template "menubar"}}
    <div id="wrapper">
        <ul id="menuContainer"></ul>
        <div id="layoutContainer" style="padding:20px">
            <div id="message"></div>
            <div id="hic">
                <label>HiC Data </label>
                <div id="hicdata">
              </div>
              <div>
                <input type="button" value="add" id="addHic"></input>
              </div>
            </div>
            <div id="bw">
                <label>BigWig Data </label>
                <div id="bwdata">
                </div>
                <div>
                  <input type="button" value="add" id="addBw"></input>
                </div>
            </div>
            <div>
                <button id="submit">submit</button>
            </div>
        </div>
    </div>
</body>
<script>

    window.onload = function() {
        var dispatch = d3.dispatch("resize","sendToElectron","openfile")
        document.addEventListener('astilectron-ready', function() {
          // This will listen to messages sent by GO
          isAstilectron = true;
          astilectron.listen(function(message) {
              // document.getElementById('message').innerHTML = message
              // This will send a message back to GO
              // astilectron.send("I'm good bro")
              if (message == "resize") {
                  dispatch.call("resize")
              }
          });

          dispatch.on("sendToElectron", function(d) {
              astilectron.send(d)
          });
          d3.select("#myNavLeft").append("li")
              .append("a")
              .attr("href","/v1/manager.html")
              .append("span")
              .attr("class","glyphicon glyphicon-wrench")
              .text("Manager")
          var dialog = require("electron").remote.dialog;
              console.log(dialog)
              dispatch.on("openfile",function(_){
                dialog.showOpenDialog({
                    properties: ['openFile'],
                    filters: [{
                        extensions: ['txt']
                    }]
                }, function(d) {
                    console.log(d)
                    _(d)
                    //dispatch.call("open",this,d)
                })
              })
      })
        var trans = function(d) {
            var r = []
            d.forEach(function(d) {
                r.push({
                    id: d.id,
                    values: d.columns
                })
            })
            return r
        }
        var URI = ""
        var stateId = "bwconfig"
        var metadata = [];
        metadata.push({
            name: "shortLabel",
            label: "LABEL",
            datatype: "string",
            editable: false
        });
        metadata.push({
            name: "url",
            label: "URL",
            datatype: "string",
            editable: false
        })
        metadata.push({
            name: "action",
            label: "ACTION",
            datatype: "html",
            editable: false
        })

        editableGrid = new EditableGrid("DemoGridJsData", {
            tableLoaded: function() {
                console.log("tableLoaded")
            },
            tableRendered: function() {
                console.log("tableRendered");

                this.setCellRenderer("action", new CellRenderer({
                    render: function(cell, value) {
                        cell.innerHTML = "<a onclick=\"if (confirm('Are you sure you want to delete this entry? ')) editableGrid.remove(" + cell.rowIndex + ");\" style=\"cursor:pointer\">" +
                            "<span><i class='glyphicon glyphicon-remove'></i></span></a>";
                    }
                }));
            },
            modelChanged: function(rowIdx, colIdx, oldValue, newValue, row) {
                _$("message").innerHTML = "<p class='ok'>New value is '" + newValue + "'</p>";
            },
            pageSize: 100
        });
        $("#addBw").on("click",function(){

          dispatch.call("openfile",this,function(d){
            console.log("callback",d)
            var n = d[0].split("/")
            editableGrid.append(editableGrid.data.length, { 'shortLabel': n[n.length-1],'url':d[0] }, true);
            dispatch.call("sendToElectron",this, JSON.stringify({
              "code":"loadBw",
              "data":d[0]
            }))
          })
        })
        hicGrid = new EditableGrid("HicGrid",{
          tableLoaded: function() {
              console.log("hicTableLoaded")
          },
          tableRendered: function() {
              console.log("hicTableRendered");

              this.setCellRenderer("action", new CellRenderer({
                  render: function(cell, value) {
                      cell.innerHTML = "<a onclick=\"if (confirm('Are you sure you want to delete this entry? ')) editableGrid.remove(" + cell.rowIndex + ");\" style=\"cursor:pointer\">" +
                          "<span><i class='glyphicon glyphicon-remove'></i></span></a>";
                  }
              }));
          },
          modelChanged: function(rowIdx, colIdx, oldValue, newValue, row) {
              _$("message").innerHTML = "<p class='ok'>New value is '" + newValue + "'</p>";
          },
          pageSize: 10

        })
        $("#addHic").on("click",function(){

          dispatch.call("openfile",this,function(d){
            console.log("callback",d)
            var n = d[0].split("/")
            hicGrid.append(hicGrid.data.length, { 'shortLabel': n[n.length-1], 'url':d[0]}, true);
            dispatch.call("sendToElectron",this, JSON.stringify({
              "code":"loadHic",
              "data":d[0]
            }))
          })
        })

        var data = []
        var ready = function(error, results) {
            if (error) throw error;
            var bw = results[0];
            var hic = results[1];
            console.log("WARNNN",bw,hic)
            var hicdata = []
            var i=0
            for (var k in hic) {
              hicdata.push({
                  id: i + 1,
                  values: {
                      shortLabel: k,
                      url: hic[k]
                  }
              })
            }
            hicGrid.load({
              "metadata": metadata,
              "data":hicdata
            })
            hicGrid.renderGrid("hicdata","datagrid")
            //var data = []
            var i=0
            for (var k in bw) {
              data.push({
                  id: i + 1,
                  values: {
                      shortLabel: k,
                      url: bw[k]
                  }
              })
            }
            editableGrid.load({
                "metadata": metadata,
                "data": data
            });
            editableGrid.renderGrid("bwdata", "datagrid");

        }
        d3.queue(2)
            .defer(d3.json, URI + "/bw/ls")
            .defer(d3.json, URI + "/hic/ls")
            .awaitAll(ready);

        $("#save").on("click", function(d) {
            console.log("save state")
            console.log(editableGrid)
            var state = JSON.stringify({
                "metadata": metadata,
                "data": trans(editableGrid.data)
            });
            localStorage.setItem(stateId, state);
        })
        $("#open").on("click", function(d) {
            console.log("load state")
            savedState = localStorage.getItem(stateId);
            console.log(savedState)

            editableGrid.load(JSON.parse(savedState))
            //editableGrid.data = JSON.parse(savedState).data
            idx = 0;
            editableGrid.data.forEach(function(d) {
                if (idx <= d.id) {
                    idx = d.id + 1
                }
            })
            editableGrid.renderGrid("bw", "datagrid");
        })
        $("#submit").on("click", function(d) {
            var state = JSON.stringify({
                "metadata": metadata,
                "data": trans(editableGrid.data)
            });
            //localStorage.setItem(stateId, state);
            //localStorage.setItem('hicId', $("#hicselect").val())
            window.location.replace("/v1/index.html")
        })

    }
</script>

</html>
{{end}}
