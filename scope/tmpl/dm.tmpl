{{define "title"}} Scope Data Manager{{.Version}} {{end}} {{define "html"}}
<html>

<head>
    <title>{{template "title"}}</title>
    {{template "lib"}}
    <script src="/plugins/editablegrid/editablegrid.min.js"></script>

    <link rel="stylesheet" href="/plugins/editablegrid/editablegrid.css" type="text/css" media="screen"> {{template "css"}}
    <style>
        h1 {
            font-size: 15px;
        }

        a {
            color: #548dc4;
            text-decoration: none;
        }

        a:hover {
            text-decoration: underline;
        }

        table.datagrid {
            border-collapse: collapse;
            border: 1px solid #CCB;
            width: 800px;
        }

        table.datagrid td,
        table.datagrid th {
            padding: 5px;
            border: 1px solid #E0E0E0;
        }

        table.datagrid th {
            background: #E5E5E5;
            text-align: left;
        }

        input.invalid {
            background: red;
            color: #FDFDFD;
        }
    </style>
    <link rel="stylesheet" href="/style0/snow.css">
</head>

<body>
    <div id="wrapper">
        <div id="menuContainer">

        <button id="getJson">Dowload as Json</button>
        </div>
        <div id="layoutContainer">
          <div id="message">
          </div>

        </div>
        <a id="downloadAnchorElem" style="display:none"></a>
    </div>
</body>
<script>
    window.onload = function() {
        var isAstilectron = false

        var dispatch = d3.dispatch("send", "openfile","del")
        window.dispatch = dispatch
        document.addEventListener('astilectron-ready', function() {
            // This will listen to messages sent by GO
            isAstilectron = true;
            astilectron.listen(function(message) {
                document.getElementById('message').innerHTML = message

            });
            dispatch.on("send", function(d) {
                astilectron.send(d)
            });
            var dialog = require("electron").remote.dialog;

            /* openfile , get path from dialog , and callback */
            dispatch.on("openfile", function(_) {
                dialog.showOpenDialog({
                    properties: ['openFile'],
                    filters: [{
                        extensions: ['txt']
                    }]
                }, function(d) {
                    console.log(d)
                    _(d)
                })
            })

        })
        dispatch.on("del",function(d){
          console.log("del",d)
          var name = d.dbname.replace("_grid_","")
          //var row = d.row
          console.log(name)
          dispatch.call("send",this, JSON.stringify({
            "code":"del",
            "dbname": name, //TODO prefix?
            "id":d.id,
      
          }))
          //console.log(window[d.dbname])

        })

        var metadata = [];
        metadata.push({
            name: "shortLabel",
            label: "LABEL",
            datatype: "string",
            editable: false
        });
        metadata.push({
            name: "url",
            label: "URL",
            datatype: "string",
            editable: false
        })
        metadata.push({
            name: "action",
            label: "ACTION",
            datatype: "html",
            editable: false
        })


        var newGrid = function(gridName, tableName) {
            window[gridName] = new EditableGrid(tableName, {
                tableLoaded: function() {
                    console.log("tableLoaded")
                },
                tableRendered: function() {
                    console.log("tableRendered");
                    this.setCellRenderer("action", new CellRenderer({
                        render: function(cell, value) {
                          //TODO Remove Line From Data Manager.
                            cell.innerHTML = "<a onclick=\"if (confirm('Are you sure you want to delete this entry? ')) {dispatch.call('del',this,{dbname:'"+gridName+"',id:'"+window[gridName].getValueAt(cell.rowIndex,0)+"'}); window['"+gridName+"'].remove(" + cell.rowIndex + ")};\" style=\"cursor:pointer\">" + "<span><i class='glyphicon glyphicon-remove'></i></span></a>";
                        }
                    }));
                },
                modelChanged: function(rowIdx, colIdx, oldValue, newValue, row) {
                    _$("message").innerHTML = "<p class='ok'>New value is '" + newValue + "'</p>";
                },
                pageSize: 100
            });

        }



        var data = []
        var simple = function() {
            var chart = function(selection) {



                selection.each(function(d) {
                    var header = d3.select(this).append("div").classed("header",true)
                    header.append("h3").classed("title",true).text(d.name)
                    var div = d3.select(this).append("div").attr("id","_div_"+d.name)
                    var divname = "_div_"+d.name
                    var name = d.name
                    newGrid("_grid_"+d.name,"_table_"+d.name)
                    var grid = window["_grid_"+d.name]
                    var m = d.data
                    var data = []
                    var i=0
                    for (var k in m) {
                      data.push({
                          id: i + 1,
                          values: {
                              shortLabel: k,
                              url: m[k]
                          }
                      })
                    }
                    grid.load({
                        "metadata": metadata,
                        "data": data
                    });
                    grid.renderGrid(divname, "datagrid");
                    var footer = d3.select(this).append("div").classed("footer",true)
                    var addBtn = footer.append("button").text("add")
                    addBtn.on("click",function(){
                      dispatch.call("openfile",this,function(d){
                        //console.log("callback",d)
                        var n = d[0].split("/")
                        grid.append(grid.data.length, { 'shortLabel': n[n.length-1],'url':d[0] }, true);
                        dispatch.call("send",this, JSON.stringify({
                          "code":"add",
                          "dbname": name, //TODO prefix?
                          "id":n[n.length-1],
                          "uri":d[0],
                        }))
                      })
                    })
                })
            }
            return chart;
        }
        //var prefixs;
        var container = d3.select("#layoutContainer")
        var dm = simple();

        var ready = function(error, results) {
            console.log(results)
            if (error) throw error;
            var db = [];
            results.forEach(function(d, i) {
                db.push({
                    "name": dbnames[i],
                    "data": d
                })
            })
            container.selectAll("div")
                .data(db)
                .enter()
                .append("div")
                .call(dm)
        }
        var dbnames;
        d3.json("/list", function(d) {
            console.log(d)
            var q = d3.queue(2)
            dbnames = d
            dbnames.forEach(function(d) {
                q.defer(d3.json, "/" + d + "/ls")
            })
            q.awaitAll(ready)
        })

        /** DownLoad as Json file */
        var getJson = function() {
          var out = {}
          var cb = function(error,results) {
              out["data"]=results
              console.log(out)
              saveToFile("data.json",JSON.stringify(out))
          }
          d3.json("/ls",function(d){
            out["meta"]=d
            var q = d3.queue(2)
            console.log(d)
            d.forEach(function(d) {
                q.defer(d3.json, "/" + d.dbname + "/ls")
            })
            q.awaitAll(cb)
          })
        }
        var saveToFile = function(fn,c) {
          var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(c);
          var dlAnchorElem = document.getElementById('downloadAnchorElem');
          dlAnchorElem.setAttribute("href",     dataStr   );
          dlAnchorElem.setAttribute("download", fn);
          dlAnchorElem.click();
        }
        d3.select("#getJson").on('click',function(){
          getJson()
        })
    }
</script>

</html>
{{end}}
